"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* @flow */
var React = require("./react");

var _require = require("./util");

var omit = _require.omit;
var cloneWithProps = React.addons.cloneWithProps;

var classSet = require("classnames");

var ListEditor = React.createClass({
  displayName: "ListEditor",

  handleChange: function handleChange(update) {
    this.props.onChange(update);
  },
  handleAddItem: function handleAddItem() {
    var value = this.props.value;

    this.handleChange(value.concat(null));
  },
  handleRemoveItem: function handleRemoveItem(index) {
    var value = this.props.value;

    if (index === 0 && value.length === 1) {
      // replace with single null item
      this.handleChange([null]);
    } else {
      // remove item by index
      this.handleChange(value.filter(function (v, i) {
        return index !== i;
      }));
    }
  },
  renderItemWrapper: function renderItemWrapper(item) {
    var _this = this;

    return React.createElement(
      "div",
      { key: item.props.name, className: "rff-array-editor-item" },
      item,
      React.createElement(
        "button",
        {
          onClick: function () {
            return _this.handleRemoveItem(item.props.name);
          },
          tabIndex: "-1",
          type: "button",
          className: "rff-array-editor-item-remove" },
        "Ã— ",
        this.props.removeItemLabel
      )
    );
  },
  render: function render() {
    var _this = this;

    var items = React.Children.map(this.props.children, function (item) {
      return _this.renderItemWrapper(item);
    });
    var inherited = omit(this.props, "for", "name", "label", "value", "type", "id");
    return React.createElement(
      "div",
      _extends({}, inherited, { className: classSet(this.props.className, "rff-array-editor") }),
      React.createElement(
        "div",
        { className: "rff-array-editor-items" },
        items
      ),
      React.createElement(
        "button",
        {
          onClick: function () {
            return _this.handleAddItem();
          },
          type: "button",
          className: "rff-array-editor-item-add"
        },
        "+ ",
        this.props.addItemLabel
      )
    );
  }
});

module.exports = ListEditor;