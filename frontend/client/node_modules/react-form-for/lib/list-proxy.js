"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* @flow */
var React = require("./react");
var cloneWithProps = React.addons.cloneWithProps;

var classSet = require("classnames");
var FormProxyMixin = require("./form-proxy-mixin");
var FieldProxyMixin = require("./field-proxy-mixin");
var FormProxy = require("./form-proxy");
var createElementFrom = require("./create-element-from");

var _require = require("./util");

var omit = _require.omit;
var extend = _require.extend;

var ListProxy = React.createClass({
  displayName: "ListProxy",

  mixins: [FormProxyMixin, FieldProxyMixin],
  statics: {
    isListProxy: true },
  renderListChildren: function renderListChildren() {
    var _this = this;

    var form = arguments[0] === undefined ? this.getForm() : arguments[0];

    var form = this.getForm();
    // note that is effectively creating a fieldset for each item in the array
    // and using that item in the array as the value for the fieldset, with the
    // child FormProxy elements passed into the ListProxy as the fields
    return form.value.map(function (item, index) {
      // note: children are passed to new FormProxy
      // this is important as a ListProxy is basically a FormProxy, but repeated
      // TODO: investigate whether child elements should be cloned
      var inherited = omit(_this.props, "for", "name", "component");
      return React.createElement(FormProxy, _extends({}, inherited, { name: index, key: index, parentForm: form }));
    });
  },
  render: function render() {
    var form = this.getForm();
    var formProps = extend(this.getFieldProps(form.parentForm), this.getFormProps(form));
    formProps.className = classSet(this.props.className, "rff-list");
    formProps.children = this.renderListChildren();
    return this.props.component ? createElementFrom(this.props.component, formProps) : React.DOM.div(formProps);
  } });

module.exports = ListProxy;