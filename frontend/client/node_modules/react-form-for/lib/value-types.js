var ValueTypes = {
  InvalidValue: InvalidValue,
  get: function(nameOrType) {
    if (!nameOrType) return ValueTypes.types.text
    if (nameOrType && typeof nameOrType == 'object') return nameOrType
    if (typeof nameOrType == 'string') {
      var foundType = ValueTypes.types[nameOrType]
      if (!foundType) throw new Error('unknown valueType '+nameOrType)
      return foundType
    }
    throw new Error('invalid valueType')
  },
  types: {
    object: {
      serialize: function(v)  {return v;},
      deserialize: function(v)  {return v;},
    },
    text: {
      serialize: defaultSerialize,
      deserialize: function(v)  {return v;},
    },
    number: {
      serialize: defaultSerialize,
      deserialize: function(v)  {return parseFloat(v);},
    },
    integer: {
      serialize: defaultSerialize,
      deserialize: function(v)  {return parseInt(v, 10);},
    },
  },
}

function defaultSerialize (v) {
  return v != null ? (v).toString() : ''
}

module.exports = ValueTypes
