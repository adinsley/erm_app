"use strict";

/* @flow */
var React = require("./react");

var _require = require("./util");

var omit = _require.omit;
var extend = _require.extend;

var createElementFrom = require("./create-element-from");
var Form = require("./form"); // avoid circular require

var API_PROPS = ["for", "name", "value", "formDelegate"];

var FormProxyMixin = {
  statics: {
    isFormProxy: true },
  isTopLevelForm: function isTopLevelForm() {
    // if this form proxy has been provided with a 'value' prop, it could become
    // the root of a new form structure. not yet supported.
    return Boolean(Form.getValueFromComponent(this));
  },
  renderFormChildren: function renderFormChildren() {
    var form = arguments[0] === undefined ? this.getForm() : arguments[0];

    return form.getChildren();
  },
  getForm: function getForm() {
    return new Form(this, this.props.parentForm);
  },
  getFormProps: function getFormProps() {
    var form = arguments[0] === undefined ? this.getForm() : arguments[0];

    var formProps = omit(this.props, API_PROPS);
    return formProps;
  } };

module.exports = FormProxyMixin;