"use strict";

/* @flow */
var extend = require("xtend/mutable");

var slice = Array.prototype.slice;
var concat = Array.prototype.concat;
var toString = Object.prototype.toString;

// subset of underscore methods for our purposes
function clone(source) {
  return extend({}, source);
}

function merge() {
  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }

  return extend.apply(null, [{}].concat(sources));
}

function contains(haystack, needle) {
  return haystack.indexOf(needle) > -1;
}

function pick(obj) {
  for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    rest[_key - 1] = arguments[_key];
  }

  var iteratee = rest[0];
  var result = {},
      key;
  if (obj == null) {
    return result;
  }if (iteratee instanceof Function) {
    for (key in obj) {
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
  } else {
    var keys = concat.apply([], rest);
    obj = new Object(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (key in obj) result[key] = obj[key];
    }
  }
  return result;
}

function omit(obj) {
  var keys = concat.apply([], slice.call(arguments, 1)).map(String);
  return pick(obj, function (value, key) {
    return !contains(keys, key);
  });
}

var idCounter = 0;
function uniqueId(prefix) {
  var id = ++idCounter + "";
  return typeof prefix == "string" ? prefix + id : id;
}

function isArray(arr) {
  return toString.call(arr) == "[object Array]";
}

function arrayCopy(arr) {
  return slice.call(arr);
}

// update nested object structure via copying
function updateIn(object, path, value) {
  if (!path || !path.length) throw new Error("invalid path");

  var updated;
  if (isArray(object)) {
    updated = arrayCopy(object);
  } else {
    updated = extend({}, object);
  }
  var name = path[0];

  if (path.length === 1) {
    updated[name] = value;
  } else {
    updated[name] = updateIn(updated[name] || {}, path.slice(1), value);
  }
  return updated;
}

module.exports = { updateIn: updateIn, clone: clone, extend: extend, merge: merge, omit: omit, pick: pick, contains: contains, uniqueId: uniqueId, isArray: isArray, arrayCopy: arrayCopy };