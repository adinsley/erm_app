"use strict";

/* @flow */
var React = require("./react");

var _require = require("./util");

var extend = _require.extend;
var omit = _require.omit;
var uniqueId = _require.uniqueId;

var labelForName = require("./label-for-name");

var FieldProxyMixin = {
  statics: {
    isFieldProxy: true },
  getDefaultProps: function getDefaultProps() {
    return {
      type: "text" };
  },
  getName: function getName() {
    return this.props["for"] || this.props.name;
  },
  getPathWithName: function getPathWithName() {
    var form = arguments[0] === undefined ? this.props.form : arguments[0];

    return form.path.concat(this.getName());
  },
  handleChange: function handleChange(e, form) {
    var updatedValue;
    var name = this.getName();
    if (e && typeof e == "object" && e.target) {
      if (e.stopPropagation) e.stopPropagation();
      updatedValue = e.target.value;
    } else {
      updatedValue = e;
    }

    form.applyUpdate(updatedValue, form.path.concat(name));
  },
  getFieldProps: function getFieldProps() {
    var _this = this;

    var form = arguments[0] === undefined ? this.props.form : arguments[0];

    var type = this.props.inputType || this.props.type;
    var name = this.getName();
    var label = this.props.label || form.getLabelFor(name) || labelForName(name);
    var value = form.getValueFor(name);
    var validation = form.getExternalValidationFor(name);
    var hint = form.getHintsFor(name);
    var id = "rff-field-input-" + uniqueId(null);
    var className = "field-" + this.getPathWithName(form).join("-");
    var onChange = function (e) {
      return _this.handleChange(e, form);
    };

    return extend(omit(this.props, "for"), { value: value, name: name, type: type, onChange: onChange, label: label, validation: validation, id: id, className: className });
  },
  getFieldComponent: function getFieldComponent() {
    return this.props.component || this.props.form.fieldComponent;
  } };

module.exports = FieldProxyMixin;